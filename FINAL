#include "CytronMakerSumo.h"

const int chA = A2;  // Steering
const int chB = A3;  // Throttle
const int userLED = A4;  // Custom user LED

int ch1, ch2;
int leftMotor, rightMotor;

// RC calibration
int ch1Min = 866, ch1Max = 2068;
int ch2Min = 2138, ch2Max = 978;

int offset = 45;  // Deadzone

void setup() {
  MakerSumo.begin();
  Serial.begin(115200);
  pinMode(chA, INPUT);
  pinMode(chB, INPUT);
  pinMode(userLED, OUTPUT);   // setup custom LED
}

void loop() {
  // ---- Read RC signals with timeout (25ms)
  ch1 = pulseIn(chA, HIGH, 25000);  
  ch2 = pulseIn(chB, HIGH, 25000);

  // ✅ Failsafe: if no signal → stop
  if (ch1 == 0 || ch2 == 0 || ch1 < 800 || ch1 > 2200 || ch2 < 800 || ch2 > 2200) {
    MakerSumo.setMotorSpeed(MOTOR_L, 0);
    MakerSumo.setMotorSpeed(MOTOR_R, 0);
    digitalWrite(userLED, HIGH);   // LED ON as warning
    Serial.println("RC signal lost → STOP");
    delay(50);
    return;
  }

  digitalWrite(userLED, LOW);  // Normal operation → LED OFF


  // ---- Map RC values to -255..255
  int rawSteering = map(ch1, ch1Min, ch1Max, -255, 255);
  int throttle    = map(ch2, ch2Min, ch2Max, -255, 255);

  // ---- Apply deadzone
  if (abs(rawSteering) < offset) rawSteering = 0;
  if (abs(throttle) < offset) throttle = 0;

  // ✅ Always Exponential steering
  float k = 1; // sensitivity factor (小 → 更柔和, 大 → 更灵敏)
  int steering = pow(abs(rawSteering) / 255.0, 2.0) * 255 * (rawSteering >= 0 ? 1 : -1) * k;

  // ---- Differential drive
  leftMotor  = throttle + steering;
  rightMotor = throttle - steering;

  leftMotor  = constrain(leftMotor, -255, 255);
  rightMotor = constrain(rightMotor, -255, 255);

  // ---- Drive motors
  MakerSumo.setMotorSpeed(MOTOR_L, leftMotor);
  MakerSumo.setMotorSpeed(MOTOR_R, rightMotor);

  // Debug
  Serial.print("Steering(EXPO): "); Serial.print(steering);
  Serial.print(" | Throttle: "); Serial.print(throttle);
  Serial.print(" | Left: "); Serial.print(leftMotor);
  Serial.print(" | Right: "); Serial.println(rightMotor);

  delay(20);
}
